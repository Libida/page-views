{"version":3,"sources":["utils/file/file.js","utils/array/array.js","utils/log/log.js","components/UploadForm/UploadForm.jsx","components/Table/Table.jsx","components/PageViewTable/PageViewTable.jsx","components/LogViewer/LogViewer.jsx","App.js","index.js"],"names":["splitStringBySeparator","string","separator","toString","split","getDescendingArrayFromObject","obj","Object","entries","sort","a","b","getLogArrayFromFileText","fileText","map","f","splitStringByWhitespace","filter","item","length","UploadForm","acceptTypes","onChange","onReset","shouldShowReset","uploadRef","className","type","accept","ref","title","onClick","Table","caption","headingsArray","bodyData","bodyKeysArray","heading","index","bodyKey","PageViewTable","data","LogViewer","logInitialValue","log","setLog","useState","logInputRef","useRef","async","file","e","fileIndex","files","target","getFileFromEvent","text","getFileText","fileArray","pageWithIpList","Map","result","reduce","ip","page","Set","isUniqueView","has","add","totalViews","uniqueViews","getLogDetailsFromFileText","alert","current","value","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b00a6dcf.chunk.js","sourcesContent":["export const getFileFromEvent = (e, fileIndex = 0) => {\n  if (!e) {\n    return null;\n  }\n\n  const files = e.target?.files;\n\n  return files?.length ? files[fileIndex] : null;\n};\n\nexport const getFileText = (file) => file?.text();\n","export const splitStringBySeparator = (string, separator = ' ') => {\n  if (!string) return [];\n\n  return string.toString().split(separator);\n};\n\nexport const splitStringByLineBreak = (string) => splitStringBySeparator(string, '\\n');\n\nexport const splitStringByWhitespace = (string) => splitStringBySeparator(string);\n\nexport const cloneDeeplyArray = (array) => JSON.parse(JSON.stringify(array));\n\nexport const getDescendingArrayFromObject = (obj) => {\n    let entries = Object.entries(obj);\n\n    return entries.sort((a, b) => b[1] - a[1]);\n};\n","import { splitStringByLineBreak, splitStringByWhitespace, getDescendingArrayFromObject } from '../array/array';\n\nexport const getLogArrayFromFileText = (fileText) => {\n  const arrayWithWhitespaces = splitStringByLineBreak(fileText);\n  const arrayOfKeyValues = arrayWithWhitespaces.map((f) => splitStringByWhitespace(f));\n  const arrayWithFilteredEmptyData = arrayOfKeyValues.filter(item => item.length);\n\n  return arrayWithFilteredEmptyData;\n};\n\nexport const getLogDetailsFromFileText = (fileText) => {\n  const fileArray = getLogArrayFromFileText(fileText);\n  const pageWithIpList = new Map();\n\n  const result = fileArray.reduce((map, item) => {\n    const ip = item[1];\n    const page = item[0];\n    pageWithIpList[page] = pageWithIpList[page] || new Set();\n    let isUniqueView = !pageWithIpList[page].has(ip);\n\n    pageWithIpList[page].add(ip);\n\n    return {\n      ...map,\n      totalViews: {\n        ...map.totalViews,\n        [page]: (map.totalViews && map.totalViews[page] || 0) + 1,\n      },\n      uniqueViews: {\n        ...map.uniqueViews,\n        ...(isUniqueView && { [page]: (map.uniqueViews && map.uniqueViews[page] || 0) + 1, })\n      },\n    };\n  }, {});\n\n  return {\n    totalViews: getDescendingArrayFromObject(result.totalViews),\n    uniqueViews: getDescendingArrayFromObject(result.uniqueViews),\n  };\n};\n","import React from 'react';\n\nimport './UploadForm.scss';\n\nconst UploadForm = ({\n                      acceptTypes = '.txt',\n                      onChange,\n                      onReset,\n                      shouldShowReset = false,\n                      uploadRef,\n                    }) => {\n  return (\n    <section className=\"upload-form-section\">\n      <h2 className=\"h-2\">Add a Document</h2>\n      <form className=\"upload-form\">\n        <input\n          type=\"file\"\n          className=\"upload-form__choose-file\"\n          accept={acceptTypes}\n          onChange={onChange}\n          ref={uploadRef}\n        />\n        {shouldShowReset && (\n          <button\n            type=\"button\"\n            className=\"upload-form__reset\"\n            aria-label=\"Reset\"\n            title=\"Reset\"\n            onClick={onReset}\n          />\n        )}\n      </form>\n    </section>\n  );\n};\n\nexport default UploadForm;\n","import React from 'react';\n\nimport './Table.scss';\n\nconst Table = ({ caption, headingsArray, bodyData, bodyKeysArray }) => {\n  if (!bodyData?.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"table-wrapper\">\n      <table className=\"table\">\n        {caption && <caption className=\"table__caption\">{caption}</caption>}\n        <thead>\n        {headingsArray?.length && (\n          <tr className=\"table__tr\">\n            {headingsArray.map((heading, index) => (\n              <th key={`${heading}-${index}`} className=\"table__th\">\n                {heading}\n              </th>\n            ))}\n          </tr>\n        )}\n        </thead>\n        <tbody>\n        {bodyData.map((item, index) => (\n          <tr className=\"table__tr\" key={index}>\n            {bodyKeysArray.map((bodyKey, index) => (\n              <td className=\"table__td\" key={`${item}-${bodyKey}-${index}`}>\n                {item[bodyKey]}\n              </td>\n            ))}\n          </tr>\n        ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React from 'react';\n\nimport { Table } from '../Table';\n\nconst PageViewTable = ({ data, caption }) => {\n  return (\n    <Table\n      caption={caption}\n      headingsArray={['Page URL', 'Views']}\n      bodyData={data}\n      bodyKeysArray={[0, 1]}\n    />\n  );\n};\n\nexport default PageViewTable;\n","import React, { useState, useRef } from 'react';\n\nimport './LogViewer.scss';\n\nimport { getFileText, getFileFromEvent } from '../../utils/file/file';\nimport { getLogDetailsFromFileText } from '../../utils/log/log';\nimport { UploadForm } from '../UploadForm';\nimport { PageViewTable } from '../PageViewTable';\n\nconst LogViewer = () => {\n  const logInitialValue = {};\n  const [log, setLog] = useState(logInitialValue);\n  const logInputRef = useRef(null);\n\n  const handleFileChange = async (e) => {\n    try {\n      const file = getFileFromEvent(e);\n      const fileText = await getFileText(file);\n      const log = getLogDetailsFromFileText(fileText);\n\n      setLog(log);\n    }\n    catch(e) {\n      alert('Something went wrong, could you please try again');\n    }\n  };\n\n  const handleFileReset = () => {\n    setLog(logInitialValue);\n    logInputRef.current.value = null;\n  };\n\n  return (\n    <div className=\"log-viewer\">\n      <UploadForm\n        acceptTypes=\".log\"\n        onChange={handleFileChange}\n        shouldShowReset={!!log.totalViews}\n        onReset={handleFileReset}\n        uploadRef={logInputRef}\n      />\n      <PageViewTable caption=\"Total page views\" data={log?.totalViews}/>\n      <PageViewTable caption=\"Unique page views\" data={log?.uniqueViews}/>\n    </div>\n  );\n};\n\nexport default LogViewer;\n","import { LogViewer } from './components/LogViewer';\n\nimport '../src/styles/styles.scss';\n\nexport default function App() {\n  return (\n    <main className=\"main\">\n      <LogViewer/>\n    </main>\n  );\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <StrictMode>\n    <App/>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}